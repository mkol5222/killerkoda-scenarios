apiVersion: apps/v1
kind: Deployment
metadata:
  name: appsec
spec:
  replicas: 3  # Adjust the number of replicas as needed
  selector:
    matchLabels:
      app: appsec
  template:
    metadata:
      labels:
        app: appsec
    spec:
      containers:
      - name: cloudguard-appsec-standalone
        env:
        - name: CPTOKEN
          valueFrom:
            secretKeyRef:
              name: appsec
              key: cptoken
        # securityContext:
        #   runAsUser: 0
        #   runAsGroup: 0
        #image: checkpoint/cloudguard-appsec-standalone:latest
        image: checkpoint/cloudguard-appsec-standalone:787396
        args:
        - /cloudguard-appsec-standalone
        - --token
        - $(CPTOKEN)
        - --ignore-all
        # env:
        # - name: https_proxy
        #   value: "user:password@Proxy address:port"
        ports:
        - containerPort: 443  # SSL port
        - containerPort: 80   # HTTP port
        - containerPort: 8117 # Health-check port
        volumeMounts:
        - name: certs
          mountPath: "/etc/certs/"
        imagePullPolicy: Always
        livenessProbe:
          failureThreshold: 3
          httpGet:
            path: /
            port: 8117
            scheme: HTTP
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 10
        startupProbe:
          failureThreshold: 90
          httpGet:
            path: /
            port: 8117
            scheme: HTTP
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 10
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      #schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - name: certs
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: appsec-service
spec:
  selector:
    app: appsec
  ports:
    - protocol: TCP
      port: 443
      name: https
      targetPort: 443  # Match the containerPort of the deployed pod
    - protocol: TCP
      port: 80
      name: http
      targetPort: 80   # Match the containerPort of the deployed pod
    - protocol: TCP
      port: 8117
      name: health-check
      targetPort: 8117  # Match the containerPort of the deployed pod
  type: LoadBalancer  # Use NodePort or ClusterIP based on your requirements